name: Build Nurvus Single Executables

on:
  push:
    branches: [main]
    paths: ['apps/nurvus/**']
  pull_request:
    branches: [main]
    paths: ['apps/nurvus/**']
  workflow_dispatch:

env:
  MIX_ENV: prod
  ELIXIR_VERSION: "1.18.4"
  OTP_VERSION: "26.2"
  ZIG_VERSION: "0.14.0"

jobs:
  build-executables:
    name: Build Single Executables
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Install 7zip
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            apps/nurvus/deps
            apps/nurvus/_build
          key: ${{ runner.os }}-mix-elixir-${{ env.ELIXIR_VERSION }}-${{ hashFiles('apps/nurvus/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-elixir-${{ env.ELIXIR_VERSION }}-

      - name: Install dependencies
        run: |
          cd apps/nurvus
          mix deps.get

      - name: Compile project
        run: |
          cd apps/nurvus
          MIX_ENV=dev mix compile

      - name: Run tests
        run: |
          cd apps/nurvus
          MIX_ENV=test mix test

      - name: Run Credo
        run: |
          cd apps/nurvus
          MIX_ENV=dev mix credo

      - name: Install production dependencies
        run: |
          cd apps/nurvus
          mix deps.get --only prod

      - name: Build Windows executable
        run: |
          cd apps/nurvus
          BURRITO_TARGET=windows MIX_ENV=prod mix release

      - name: Build Linux executable  
        run: |
          cd apps/nurvus
          BURRITO_TARGET=linux MIX_ENV=prod mix release

      - name: Build macOS executable
        run: |
          cd apps/nurvus
          BURRITO_TARGET=macos MIX_ENV=prod mix release

      - name: Create machine-specific packages
        run: |
          cd apps/nurvus
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # List available executables
          echo "Available executables:"
          ls -la burrito_out/
          
          # Copy executables with proper names and extensions
          if [ -f burrito_out/nurvus_windows.exe ]; then
            cp burrito_out/nurvus_windows.exe artifacts/nurvus.exe
          fi
          if [ -f burrito_out/nurvus_linux ]; then
            cp burrito_out/nurvus_linux artifacts/nurvus
          fi
          if [ -f burrito_out/nurvus_macos ]; then
            cp burrito_out/nurvus_macos artifacts/nurvus_macos
          fi
          
          # Create Zelan (Mac Studio) package - AI Services
          if [ -f burrito_out/nurvus_macos ]; then
            mkdir -p artifacts/zelan
            cp burrito_out/nurvus_macos artifacts/zelan/nurvus
            cp config/zelan.json artifacts/zelan/processes.json
            cp -r deployment artifacts/zelan/
            cp deployment/systemd/nurvus-zelan.service artifacts/zelan/nurvus.service
            tar -czf artifacts/nurvus-zelan.tar.gz -C artifacts/zelan .
          fi
          
          # Create Saya (Mac Mini) package - Docker Services  
          if [ -f burrito_out/nurvus_macos ]; then
            mkdir -p artifacts/saya
            cp burrito_out/nurvus_macos artifacts/saya/nurvus
            cp config/saya.json artifacts/saya/processes.json
            cp -r deployment artifacts/saya/
            cp deployment/systemd/nurvus-saya.service artifacts/saya/nurvus.service
            tar -czf artifacts/nurvus-saya.tar.gz -C artifacts/saya .
          fi
          
          # Create Demi (Windows PC) package - Streaming Apps
          if [ -f burrito_out/nurvus_windows.exe ]; then
            mkdir -p artifacts/demi
            cp burrito_out/nurvus_windows.exe artifacts/demi/nurvus.exe
            cp config/demi.json artifacts/demi/processes.json
            cp -r deployment artifacts/demi/
            tar -czf artifacts/nurvus-demi.tar.gz -C artifacts/demi .
          fi
          
          # Create Alys (Windows VM) package - Automation
          if [ -f burrito_out/nurvus_windows.exe ]; then
            mkdir -p artifacts/alys
            cp burrito_out/nurvus_windows.exe artifacts/alys/nurvus.exe
            cp config/alys.json artifacts/alys/processes.json
            cp -r deployment artifacts/alys/
            tar -czf artifacts/nurvus-alys.tar.gz -C artifacts/alys .
          fi
          
          # Create standalone executables archive
          mkdir -p artifacts/standalone
          if [ -f burrito_out/nurvus_windows.exe ]; then
            cp burrito_out/nurvus_windows.exe artifacts/standalone/nurvus.exe
          fi
          if [ -f burrito_out/nurvus_linux ]; then
            cp burrito_out/nurvus_linux artifacts/standalone/nurvus_linux
          fi
          if [ -f burrito_out/nurvus_macos ]; then
            cp burrito_out/nurvus_macos artifacts/standalone/nurvus_macos
          fi
          if [ -d artifacts/standalone ] && [ "$(ls -A artifacts/standalone)" ]; then
            tar -czf artifacts/nurvus-standalone.tar.gz -C artifacts/standalone .
          fi
          
          # Cleanup temporary directories
          rm -rf artifacts/{zelan,saya,demi,alys,standalone}
          
          # List created artifacts with sizes
          ls -la artifacts/
          echo "Executable sizes:"
          if ls artifacts/nurvus* 1> /dev/null 2>&1; then
            du -h artifacts/nurvus*
          else
            echo "No standalone executables found"
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nurvus-executables-${{ github.sha }}
          path: |
            apps/nurvus/artifacts/*.tar.gz
            apps/nurvus/artifacts/nurvus*
          retention-days: 30

      - name: Create release summary
        run: |
          cd apps/nurvus
          echo "## Nurvus Single Executable Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Single Executables Created:" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus.exe** - Windows x86_64 single executable" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus** - Linux x86_64 single executable" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus_macos** - macOS ARM64 single executable" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Machine-Specific Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-zelan.tar.gz** - Mac Studio (AI services + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-saya.tar.gz** - Mac Mini (Docker services + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-demi.tar.gz** - Windows PC (streaming apps + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-alys.tar.gz** - Windows VM (automation + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-standalone.tar.gz** - All platforms standalone executables" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the appropriate package or standalone executable" >> $GITHUB_STEP_SUMMARY
          echo "2. Extract (for packages) or place executable directly" >> $GITHUB_STEP_SUMMARY
          echo "3. Run: \`./nurvus\` (Unix) or \`nurvus.exe\` (Windows)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### File Sizes:" >> $GITHUB_STEP_SUMMARY
          if [ -f artifacts/nurvus.exe ]; then
            echo "- nurvus.exe: $(du -h artifacts/nurvus.exe | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f artifacts/nurvus ]; then
            echo "- nurvus (Linux): $(du -h artifacts/nurvus | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f artifacts/nurvus_macos ]; then
            echo "- nurvus_macos: $(du -h artifacts/nurvus_macos | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi
          for archive in artifacts/*.tar.gz; do
            if [ -f "$archive" ]; then
              filename=$(basename "$archive")
              echo "- $filename: $(du -h "$archive" | cut -f1)" >> $GITHUB_STEP_SUMMARY
            fi
          done

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-executables
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nurvus-executables-${{ github.sha }}
          path: artifacts

      - name: Get version
        id: version
        run: |
          cd apps/nurvus
          VERSION=$(grep 'version:' mix.exs | head -1 | sed 's/.*version: "\(.*\)".*/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}
          name: "Nurvus ${{ steps.version.outputs.version }} Single Executables"
          body: |
            ## Nurvus Process Manager - Single Executable Release ðŸŒ¯

            Automated build from commit ${{ github.sha }}.

            ### Single Executables (Download & Go):
            - `nurvus.exe` - **Windows** x86_64 single executable  
            - `nurvus` - **Linux** x86_64 single executable
            - `nurvus_macos` - **macOS** ARM64 single executable
            - `nurvus-standalone.tar.gz` - All platform executables in one archive

            ### Machine-Specific Packages (Executable + Config + Deployment):
            - `nurvus-zelan.tar.gz` - **Mac Studio** (AI services: Phononmaser, Analysis, LM Studio)
            - `nurvus-saya.tar.gz` - **Mac Mini** (Docker services: Landale stack)
            - `nurvus-demi.tar.gz` - **Windows PC** (Streaming: OBS, VTube Studio, TITS)
            - `nurvus-alys.tar.gz` - **Windows VM** (Automation: Streamer.Bot)

            ### Quick Start:
            ```bash
            # Windows
            curl -L -o nurvus.exe https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus.exe
            ./nurvus.exe
            
            # Linux  
            curl -L -o nurvus https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus
            chmod +x nurvus
            ./nurvus
            
            # macOS
            curl -L -o nurvus https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus_macos
            chmod +x nurvus
            ./nurvus
            ```

            ### Machine-Specific Deployment:
            ```bash
            # Download your machine's package
            curl -L -o nurvus-[machine].tar.gz https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus-[machine].tar.gz
            tar -xzf nurvus-[machine].tar.gz
            cd nurvus-[machine]
            
            # Unix: Run deployment script
            sudo ./deployment/scripts/deploy.sh
            
            # Windows: Run deployment script  
            .\deployment\scripts\deploy-windows.ps1
            
            # Or start manually
            ./nurvus  # or nurvus.exe on Windows
            ```

            ### API Endpoints:
            - Health: `GET http://localhost:4001/health`
            - Processes: `GET http://localhost:4001/api/processes`
            - Start Process: `POST http://localhost:4001/api/processes/{id}/start`
            - Stop Process: `POST http://localhost:4001/api/processes/{id}/stop`

            See `DEPLOYMENT.md` for complete setup instructions.
          files: |
            artifacts/*
          draft: false
          prerelease: false