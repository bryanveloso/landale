name: Build Nurvus Releases

on:
  push:
    branches: [main]
    paths: ['apps/nurvus/**']
  pull_request:
    branches: [main]
    paths: ['apps/nurvus/**']
  workflow_dispatch:

env:
  MIX_ENV: prod
  ELIXIR_VERSION: "1.16.3"
  OTP_VERSION: "26.2"

jobs:
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            apps/nurvus/deps
            apps/nurvus/_build
          key: ${{ runner.os }}-mix-${{ hashFiles('apps/nurvus/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          cd apps/nurvus
          mix deps.get

      - name: Compile project
        run: |
          cd apps/nurvus
          MIX_ENV=dev mix compile

      - name: Run tests
        run: |
          cd apps/nurvus
          MIX_ENV=test mix test

      - name: Run Credo
        run: |
          cd apps/nurvus
          MIX_ENV=dev mix credo

      - name: Install production dependencies
        run: |
          cd apps/nurvus
          mix deps.get --only prod

      - name: Build release
        run: |
          cd apps/nurvus
          MIX_ENV=prod mix release

      - name: Create machine-specific artifacts
        run: |
          cd apps/nurvus
          
          # Create release packages for each machine
          mkdir -p artifacts
          
          # Base release tarball
          tar -czf artifacts/nurvus-release-base.tar.gz -C _build/prod/rel/nurvus .
          
          # Zelan (Mac Studio) - AI Services
          mkdir -p artifacts/zelan
          tar -xzf artifacts/nurvus-release-base.tar.gz -C artifacts/zelan
          cp config/zelan.json artifacts/zelan/config/processes.json
          # Add deployment scripts
          cp -r deployment artifacts/zelan/
          cp deployment/systemd/nurvus-zelan.service artifacts/zelan/nurvus.service
          tar -czf artifacts/nurvus-zelan.tar.gz -C artifacts/zelan .
          
          # Saya (Mac Mini) - Docker Services  
          mkdir -p artifacts/saya
          tar -xzf artifacts/nurvus-release-base.tar.gz -C artifacts/saya
          cp config/saya.json artifacts/saya/config/processes.json
          # Add deployment scripts
          cp -r deployment artifacts/saya/
          cp deployment/systemd/nurvus-saya.service artifacts/saya/nurvus.service
          tar -czf artifacts/nurvus-saya.tar.gz -C artifacts/saya .
          
          # Demi (Windows PC) - Streaming Apps
          mkdir -p artifacts/demi
          tar -xzf artifacts/nurvus-release-base.tar.gz -C artifacts/demi
          cp config/demi.json artifacts/demi/config/processes.json
          # Add deployment scripts (Windows)
          cp -r deployment artifacts/demi/
          tar -czf artifacts/nurvus-demi.tar.gz -C artifacts/demi .
          
          # Alys (Windows VM) - Automation
          mkdir -p artifacts/alys
          tar -xzf artifacts/nurvus-release-base.tar.gz -C artifacts/alys
          cp config/alys.json artifacts/alys/config/processes.json
          # Add deployment scripts (Windows)
          cp -r deployment artifacts/alys/
          tar -czf artifacts/nurvus-alys.tar.gz -C artifacts/alys .
          
          # Cleanup temporary directories
          rm -rf artifacts/{zelan,saya,demi,alys}
          
          # List created artifacts
          ls -la artifacts/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nurvus-releases-${{ github.sha }}
          path: apps/nurvus/artifacts/*.tar.gz
          retention-days: 30

      - name: Create release summary
        run: |
          cd apps/nurvus
          echo "## Nurvus Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Created:" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-release-base.tar.gz** - Base release (all platforms)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-zelan.tar.gz** - Mac Studio (AI services + deployment scripts)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-saya.tar.gz** - Mac Mini (Docker services + deployment scripts)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-demi.tar.gz** - Windows PC (streaming apps + deployment scripts)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-alys.tar.gz** - Windows VM (automation + deployment scripts)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the appropriate machine artifact" >> $GITHUB_STEP_SUMMARY
          echo "2. Extract to target machine" >> $GITHUB_STEP_SUMMARY
          echo "3. Run deployment script or manual setup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### File Sizes:" >> $GITHUB_STEP_SUMMARY
          du -h artifacts/*.tar.gz | while read size file; do
            filename=$(basename "$file")
            echo "- $filename: $size" >> $GITHUB_STEP_SUMMARY
          done

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nurvus-releases-${{ github.sha }}
          path: artifacts

      - name: Get version
        id: version
        run: |
          cd apps/nurvus
          VERSION=$(grep 'version:' mix.exs | head -1 | sed 's/.*version: "\(.*\)".*/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}
          name: "Nurvus ${{ steps.version.outputs.version }} Build ${{ github.sha }}"
          body: |
            ## Nurvus Process Manager Release

            Automated build from commit ${{ github.sha }}.

            ### Machine-Specific Artifacts:
            Each archive contains the release + deployment scripts + machine config:
            - `nurvus-zelan.tar.gz` - Mac Studio (AI services: Phononmaser, Analysis, LM Studio)
            - `nurvus-saya.tar.gz` - Mac Mini (Docker services: Landale stack)
            - `nurvus-demi.tar.gz` - Windows PC (Streaming: OBS, VTube Studio, TITS)
            - `nurvus-alys.tar.gz` - Windows VM (Automation: Streamer.Bot)

            ### Quick Deploy:
            ```bash
            # Download and extract for your machine
            wget https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus-[machine].tar.gz
            sudo mkdir -p /opt/nurvus
            sudo tar -xzf nurvus-[machine].tar.gz -C /opt/nurvus/
            
            # Unix: Run deployment script
            cd /opt/nurvus && sudo ./deployment/scripts/deploy.sh
            
            # Windows: Run deployment script  
            cd C:\nurvus && .\deployment\scripts\deploy-windows.ps1
            
            # Or start manually
            /opt/nurvus/bin/nurvus start
            ```

            ### API Endpoints:
            - Health: `GET http://localhost:4001/health`
            - Processes: `GET http://localhost:4001/api/processes`
            - Start Process: `POST http://localhost:4001/api/processes/{id}/start`
            - Stop Process: `POST http://localhost:4001/api/processes/{id}/stop`

            See `DEPLOYMENT.md` for complete setup instructions.
          files: |
            artifacts/nurvus-*.tar.gz
          draft: false
          prerelease: false
