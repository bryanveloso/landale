name: Build Nurvus Single Executables

on:
  push:
    branches: [main]
    paths: ['apps/nurvus/**']
  pull_request:
    branches: [main]
    paths: ['apps/nurvus/**']
  workflow_dispatch:

env:
  MIX_ENV: prod
  ELIXIR_VERSION: "1.18.4"
  OTP_VERSION: "26.1"
  ZIG_VERSION: "0.14.0"

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            apps/nurvus/deps
            apps/nurvus/_build
          key: test-${{ runner.os }}-elixir-${{ env.ELIXIR_VERSION }}-${{ hashFiles('apps/nurvus/mix.lock') }}
          restore-keys: |
            test-${{ runner.os }}-elixir-${{ env.ELIXIR_VERSION }}-

      - name: Install dependencies
        run: |
          cd apps/nurvus
          mix deps.get

      - name: Compile project
        run: |
          cd apps/nurvus
          MIX_ENV=dev mix compile

      - name: Run tests
        run: |
          cd apps/nurvus
          MIX_ENV=test mix test

      - name: Run Credo
        run: |
          cd apps/nurvus
          MIX_ENV=dev mix credo

  build:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target: [windows, linux, macos]
        include:
          - target: windows
            executable: nurvus_windows.exe
            artifact_name: nurvus.exe
          - target: linux
            executable: nurvus_linux
            artifact_name: nurvus
          - target: macos
            executable: nurvus_macos
            artifact_name: nurvus_macos
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Install 7zip
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            apps/nurvus/deps
            apps/nurvus/_build
          key: build-${{ runner.os }}-elixir-${{ env.ELIXIR_VERSION }}-zig-${{ env.ZIG_VERSION }}-${{ hashFiles('apps/nurvus/mix.lock') }}
          restore-keys: |
            build-${{ runner.os }}-elixir-${{ env.ELIXIR_VERSION }}-zig-${{ env.ZIG_VERSION }}-

      - name: Install dependencies
        run: |
          cd apps/nurvus
          mix deps.get --only prod

      - name: Build ${{ matrix.target }} executable
        run: |
          cd apps/nurvus
          BURRITO_TARGET=${{ matrix.target }} MIX_ENV=prod mix release --overwrite

      - name: Verify executable exists
        run: |
          cd apps/nurvus
          if [ ! -f "burrito_out/${{ matrix.executable }}" ]; then
            echo "❌ Expected executable not found: burrito_out/${{ matrix.executable }}"
            echo "Available files:"
            ls -la burrito_out/
            exit 1
          fi
          echo "✅ Successfully built: ${{ matrix.executable }}"
          echo "📏 Size: $(du -h burrito_out/${{ matrix.executable }} | cut -f1)"

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-executable
          path: apps/nurvus/burrito_out/${{ matrix.executable }}
          retention-days: 7

  package:
    name: Create Release Packages
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all executables
        uses: actions/download-artifact@v4
        with:
          path: executables

      - name: Organize executables
        run: |
          mkdir -p burrito_out
          
          # Move executables to expected locations
          cp executables/windows-executable/* burrito_out/
          cp executables/linux-executable/* burrito_out/  
          cp executables/macos-executable/* burrito_out/
          
          echo "📦 Available executables:"
          ls -la burrito_out/
          
          # Verify all targets built successfully
          missing=""
          for target in windows linux macos; do
            if [ "$target" = "windows" ]; then
              file="nurvus_windows.exe"
            else
              file="nurvus_${target}"
            fi
            
            if [ ! -f "burrito_out/$file" ]; then
              missing="$missing $target"
            fi
          done
          
          if [ -n "$missing" ]; then
            echo "❌ Missing executables for:$missing"
            echo "🚫 Cannot create complete release packages"
            exit 1
          fi
          
          echo "✅ All executables present, proceeding with packaging"

      - name: Create release packages
        run: |
          cd apps/nurvus
          mkdir -p artifacts
          
          # Copy standalone executables with clean names
          cp ../../burrito_out/nurvus_windows.exe artifacts/nurvus.exe
          cp ../../burrito_out/nurvus_linux artifacts/nurvus
          cp ../../burrito_out/nurvus_macos artifacts/nurvus_macos
          
          # Create machine-specific packages
          declare -A machines=(
            ["zelan"]="macos"
            ["saya"]="macos"  
            ["demi"]="windows"
            ["alys"]="windows"
          )
          
          for machine in "${!machines[@]}"; do
            platform="${machines[$machine]}"
            echo "📦 Creating package for $machine ($platform)..."
            
            mkdir -p "artifacts/$machine"
            
            # Copy appropriate executable
            if [ "$platform" = "windows" ]; then
              cp "../../burrito_out/nurvus_windows.exe" "artifacts/$machine/nurvus.exe"
            else
              cp "../../burrito_out/nurvus_macos" "artifacts/$machine/nurvus"
            fi
            
            # Copy machine-specific config and deployment files
            cp "config/$machine.json" "artifacts/$machine/processes.json"
            cp -r deployment "artifacts/$machine/"
            
            # Copy systemd service for Unix machines
            if [ "$platform" != "windows" ]; then
              cp "deployment/systemd/nurvus-$machine.service" "artifacts/$machine/nurvus.service"
            fi
            
            # Create package
            tar -czf "artifacts/nurvus-$machine.tar.gz" -C "artifacts/$machine" .
            echo "✅ Created: nurvus-$machine.tar.gz"
          done
          
          # Cleanup temp directories
          rm -rf artifacts/{zelan,saya,demi,alys}
          
          echo "📋 Final artifacts:"
          ls -la artifacts/
          
          echo "📏 Executable sizes:"
          du -h artifacts/nurvus* | sort -h

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nurvus-release-packages
          path: |
            apps/nurvus/artifacts/*.tar.gz
            apps/nurvus/artifacts/nurvus*
          retention-days: 30

      - name: Create release summary
        run: |
          cd apps/nurvus
          echo "## 🌯 Nurvus Single Executable Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Single Executables Created:" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus.exe** - Windows x86_64 single executable" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus** - Linux x86_64 single executable" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus_macos** - macOS ARM64 single executable" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Machine-Specific Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-zelan.tar.gz** - Mac Studio (AI services + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-saya.tar.gz** - Mac Mini (Docker services + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-demi.tar.gz** - Windows PC (streaming apps + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **nurvus-alys.tar.gz** - Windows VM (automation + config + deployment)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Quick Deploy:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Download and run directly:" >> $GITHUB_STEP_SUMMARY
          echo "curl -L -o nurvus.exe [release-url]/nurvus.exe && ./nurvus.exe  # Windows" >> $GITHUB_STEP_SUMMARY
          echo "curl -L -o nurvus [release-url]/nurvus && chmod +x nurvus && ./nurvus  # Linux" >> $GITHUB_STEP_SUMMARY
          echo "curl -L -o nurvus [release-url]/nurvus_macos && chmod +x nurvus && ./nurvus  # macOS" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📏 File Sizes:" >> $GITHUB_STEP_SUMMARY
          for file in artifacts/nurvus*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              echo "- $filename: $size" >> $GITHUB_STEP_SUMMARY
            fi
          done

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release packages
        uses: actions/download-artifact@v4
        with:
          name: nurvus-release-packages
          path: artifacts

      - name: Get version
        id: version
        run: |
          cd apps/nurvus
          VERSION=$(grep 'version:' mix.exs | head -1 | sed 's/.*version: "\(.*\)".*/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}
          name: "Nurvus ${{ steps.version.outputs.version }} Single Executables"
          body: |
            ## Nurvus Process Manager - Single Executable Release 🌯

            Automated build from commit ${{ github.sha }}.

            ### Single Executables (Download & Go):
            - `nurvus.exe` - **Windows** x86_64 single executable  
            - `nurvus` - **Linux** x86_64 single executable
            - `nurvus_macos` - **macOS** ARM64 single executable

            ### Machine-Specific Packages (Executable + Config + Deployment):
            - `nurvus-zelan.tar.gz` - **Mac Studio** (AI services: Phononmaser, Analysis, LM Studio)
            - `nurvus-saya.tar.gz` - **Mac Mini** (Docker services: Landale stack)
            - `nurvus-demi.tar.gz` - **Windows PC** (Streaming: OBS, VTube Studio, TITS)
            - `nurvus-alys.tar.gz` - **Windows VM** (Automation: Streamer.Bot)

            ### Quick Start:
            ```bash
            # Windows
            curl -L -o nurvus.exe https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus.exe
            ./nurvus.exe
            
            # Linux  
            curl -L -o nurvus https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus
            chmod +x nurvus
            ./nurvus
            
            # macOS
            curl -L -o nurvus https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus_macos
            chmod +x nurvus
            ./nurvus
            ```

            ### Machine-Specific Deployment:
            ```bash
            # Download your machine's package
            curl -L -o nurvus-[machine].tar.gz https://github.com/bryanveloso/landale/releases/download/nurvus-${{ steps.version.outputs.version }}-${{ github.sha }}/nurvus-[machine].tar.gz
            tar -xzf nurvus-[machine].tar.gz
            cd nurvus-[machine]
            
            # Unix: Run deployment script
            sudo ./deployment/scripts/deploy.sh
            
            # Windows: Run deployment script  
            .\deployment\scripts\deploy-windows.ps1
            
            # Or start manually
            ./nurvus  # or nurvus.exe on Windows
            ```

            ### API Endpoints:
            - Health: `GET http://localhost:4001/health`
            - Processes: `GET http://localhost:4001/api/processes`
            - Start Process: `POST http://localhost:4001/api/processes/{id}/start`
            - Stop Process: `POST http://localhost:4001/api/processes/{id}/stop`

            See `DEPLOYMENT.md` for complete setup instructions.
          files: |
            artifacts/*
          draft: false
          prerelease: false