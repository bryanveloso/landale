{
  "components": {
    "responses": {},
    "schemas": {
      "CreateTwitchSubscription": { "$ref": "#/components/schemas/CreateTwitchSubscription" },
      "ErrorResponse": { "$ref": "#/components/schemas/ErrorResponse" },
      "HealthStatus": { "$ref": "#/components/schemas/HealthStatus" },
      "IronmonChallenge": { "$ref": "#/components/schemas/IronmonChallenge" },
      "IronmonCheckpoint": { "$ref": "#/components/schemas/IronmonCheckpoint" },
      "IronmonResult": { "$ref": "#/components/schemas/IronmonResult" },
      "OBSScenes": { "$ref": "#/components/schemas/OBSScenes" },
      "OBSStatus": { "$ref": "#/components/schemas/OBSStatus" },
      "OBSStreamStatus": { "$ref": "#/components/schemas/OBSStreamStatus" },
      "RainwaveConfig": {
        "properties": {
          "enabled": {
            "description": "Enable or disable the Rainwave service",
            "example": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "station_id": {
            "description": "Rainwave station ID (1=Game, 2=OCRemix, 3=Covers, 4=Chiptunes, 5=All)",
            "example": 3,
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "RainwaveConfig",
        "type": "object",
        "x-struct": "Elixir.ServerWeb.Schemas.RainwaveConfig",
        "x-validate": null
      },
      "RainwaveStatus": {
        "properties": {
          "data": {
            "properties": {
              "rainwave": {
                "properties": {
                  "current_song": {
                    "nullable": true,
                    "properties": {
                      "album": { "example": "Album Name", "type": "string", "x-struct": null, "x-validate": null },
                      "album_art": {
                        "example": "https://rainwave.cc/path/art_320.jpg",
                        "nullable": true,
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "artist": { "example": "Artist Name", "type": "string", "x-struct": null, "x-validate": null },
                      "end_time": { "example": 1640995440, "type": "integer", "x-struct": null, "x-validate": null },
                      "length": { "example": 240, "type": "integer", "x-struct": null, "x-validate": null },
                      "start_time": { "example": 1640995200, "type": "integer", "x-struct": null, "x-validate": null },
                      "title": { "example": "Song Title", "type": "string", "x-struct": null, "x-validate": null },
                      "url": {
                        "example": "https://rainwave.cc/song/12345",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "enabled": { "example": true, "type": "boolean", "x-struct": null, "x-validate": null },
                  "has_credentials": { "example": true, "type": "boolean", "x-struct": null, "x-validate": null },
                  "listening": { "example": true, "type": "boolean", "x-struct": null, "x-validate": null },
                  "station_id": { "example": 3, "type": "integer", "x-struct": null, "x-validate": null },
                  "station_name": { "example": "Covers", "type": "string", "x-struct": null, "x-validate": null }
                },
                "required": ["enabled", "listening", "station_id", "station_name", "has_credentials"],
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "timestamp": { "format": "date-time", "type": "string", "x-struct": null, "x-validate": null }
            },
            "required": ["rainwave", "timestamp"],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "success": { "example": true, "type": "boolean", "x-struct": null, "x-validate": null }
        },
        "required": ["success", "data"],
        "title": "RainwaveStatus",
        "type": "object",
        "x-struct": "Elixir.ServerWeb.Schemas.RainwaveStatus",
        "x-validate": null
      },
      "ServiceStatus": { "$ref": "#/components/schemas/ServiceStatus" },
      "SuccessResponse": { "$ref": "#/components/schemas/SuccessResponse" },
      "TokenStatus": {
        "properties": {
          "connected": {
            "description": "Service connection status",
            "example": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "error": {
            "description": "Error message if token is invalid",
            "example": "Token expired",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "expires_at": {
            "description": "Token expiration timestamp (ISO 8601)",
            "example": "2024-08-15T10:30:00Z",
            "format": "datetime",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "last_validated": {
            "description": "Last time token was validated",
            "example": "2024-07-03T20:00:00Z",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "scopes": {
            "description": "OAuth scopes granted to the token",
            "example": ["channel:read:subscriptions", "moderator:read:followers"],
            "items": { "type": "string", "x-struct": null, "x-validate": null },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "service": {
            "description": "OAuth service name",
            "example": "twitch",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "token_valid": {
            "description": "Token validity status",
            "example": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["service", "connected", "token_valid"],
        "title": "TokenStatus",
        "type": "object",
        "x-struct": "Elixir.ServerWeb.Schemas.TokenStatus",
        "x-validate": null
      },
      "TokenStatusResponse": {
        "properties": {
          "data": {
            "additionalProperties": { "$ref": "#/components/schemas/TokenStatus" },
            "description": "OAuth token status for each service",
            "properties": { "twitch": { "$ref": "#/components/schemas/TokenStatus" } },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "success": { "example": true, "type": "boolean", "x-struct": null, "x-validate": null }
        },
        "required": ["success", "data"],
        "title": "TokenStatusResponse",
        "type": "object",
        "x-struct": "Elixir.ServerWeb.Schemas.TokenStatusResponse",
        "x-validate": null
      },
      "TwitchStatus": { "$ref": "#/components/schemas/TwitchStatus" },
      "TwitchSubscription": { "$ref": "#/components/schemas/TwitchSubscription" },
      "TwitchSubscriptionTypes": { "$ref": "#/components/schemas/TwitchSubscriptionTypes" }
    }
  },
  "info": {
    "description": "REST API for the Landale streaming overlay system.\n\nThis API provides endpoints for:\n- OBS WebSocket integration and controls\n- Twitch EventSub subscription management  \n- IronMON Pokemon challenge data\n- System health and monitoring\n- Real-time dashboard communication\n\nAll endpoints return JSON and follow RESTful conventions.\n",
    "title": "Landale Streaming Server API",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/twitch/subscription-types": {
      "get": {
        "callbacks": {},
        "description": "Returns all available Twitch EventSub subscription types with descriptions and required scopes",
        "operationId": "ServerWeb.TwitchController.subscription_types",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TwitchSubscriptionTypes" } } },
            "description": "Success"
          }
        },
        "summary": "Get available EventSub subscription types",
        "tags": []
      }
    },
    "/api/websocket/channels": {
      "get": {
        "callbacks": {},
        "description": "Returns a list of all available Phoenix channels with their topic patterns",
        "operationId": "ServerWeb.WebSocketController.channels",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "List available WebSocket channels",
        "tags": []
      }
    },
    "/api/control/ping": {
      "post": {
        "callbacks": {},
        "description": "Simple keep-alive endpoint that returns server timestamp",
        "operationId": "ServerWeb.ControlController.ping",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "Ping endpoint",
        "tags": []
      }
    },
    "/api/twitch/subscriptions/{id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a specific EventSub subscription by ID",
        "operationId": "ServerWeb.TwitchController.delete_subscription",
        "parameters": [
          {
            "description": "Subscription ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "x-struct": null, "x-validate": null }
          }
        ],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          }
        },
        "summary": "Delete Twitch EventSub subscription",
        "tags": []
      }
    },
    "/api/ironmon/results/recent": {
      "get": {
        "callbacks": {},
        "description": "Returns recent challenge results with optional pagination",
        "operationId": "ServerWeb.IronmonController.recent_results",
        "parameters": [
          {
            "description": "Number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "integer", "x-struct": null, "x-validate": null }
          },
          {
            "description": "Pagination cursor",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": { "type": "integer", "x-struct": null, "x-validate": null }
          }
        ],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "Get recent IronMON results",
        "tags": []
      }
    },
    "/api/ironmon/challenges/{id}/checkpoints": {
      "get": {
        "callbacks": {},
        "description": "Returns all checkpoints for a specific challenge",
        "operationId": "ServerWeb.IronmonController.list_checkpoints",
        "parameters": [
          {
            "description": "Challenge ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "x-struct": null, "x-validate": null }
          }
        ],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          }
        },
        "summary": "List challenge checkpoints",
        "tags": []
      }
    },
    "/api/websocket/examples": {
      "get": {
        "callbacks": {},
        "description": "Returns practical WebSocket client examples for all channels and commands",
        "operationId": "ServerWeb.WebSocketController.examples",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "Get WebSocket usage examples",
        "tags": []
      }
    },
    "/api/obs/scenes": {
      "get": {
        "callbacks": {},
        "description": "Returns list of available scenes and current scene information",
        "operationId": "ServerWeb.OBSController.scenes",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS scenes",
        "tags": []
      }
    },
    "/api/ironmon/seeds/{id}/challenge": {
      "get": {
        "callbacks": {},
        "description": "Returns the active challenge associated with a specific seed ID",
        "operationId": "ServerWeb.IronmonController.active_challenge",
        "parameters": [
          {
            "description": "Seed ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "x-struct": null, "x-validate": null }
          }
        ],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          },
          "404": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Not Found"
          }
        },
        "summary": "Get active challenge for seed",
        "tags": []
      }
    },
    "/api/obs/scene/current": {
      "get": {
        "callbacks": {},
        "description": "Returns the currently active scene in OBS Studio",
        "operationId": "ServerWeb.OBSController.current_scene",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get current OBS scene",
        "tags": []
      }
    },
    "/api/twitch/status": {
      "get": {
        "callbacks": {},
        "description": "Returns current Twitch EventSub connection status and metrics",
        "operationId": "ServerWeb.TwitchController.status",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get Twitch service status",
        "tags": []
      }
    },
    "/api/obs/stats": {
      "get": {
        "callbacks": {},
        "description": "Returns comprehensive OBS performance statistics and metrics",
        "operationId": "ServerWeb.OBSController.stats",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS statistics",
        "tags": []
      }
    },
    "/api/obs/recording/start": {
      "post": {
        "callbacks": {},
        "description": "Starts recording in OBS Studio",
        "operationId": "ServerWeb.OBSController.start_recording",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Start OBS recording",
        "tags": []
      }
    },
    "/api/ironmon/challenges": {
      "get": {
        "callbacks": {},
        "description": "Returns all available IronMON challenges",
        "operationId": "ServerWeb.IronmonController.list_challenges",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "List IronMON challenges",
        "tags": []
      }
    },
    "/api/control/tokens": {
      "get": {
        "callbacks": {},
        "description": "Returns OAuth token validity and expiration information for external services",
        "operationId": "ServerWeb.ControlController.tokens",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenStatusResponse" } } },
            "description": "Success"
          }
        },
        "summary": "Get OAuth token status",
        "tags": []
      }
    },
    "/api/obs/status": {
      "get": {
        "callbacks": {},
        "description": "Returns current OBS WebSocket connection status and state information",
        "operationId": "ServerWeb.OBSController.status",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS WebSocket status",
        "tags": []
      }
    },
    "/ready": {
      "get": {
        "callbacks": {},
        "description": "Returns 200 if service is ready to accept traffic, 503 otherwise",
        "operationId": "ServerWeb.HealthController.ready",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Ready"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Not Ready"
          }
        },
        "summary": "Readiness probe",
        "tags": []
      }
    },
    "/api/websocket/schema": {
      "get": {
        "callbacks": {},
        "description": "Returns complete WebSocket API documentation including all channels, commands, events, and examples",
        "operationId": "ServerWeb.WebSocketController.schema",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "Get WebSocket API schema",
        "tags": []
      }
    },
    "/api/obs/streaming/start": {
      "post": {
        "callbacks": {},
        "description": "Starts streaming in OBS Studio",
        "operationId": "ServerWeb.OBSController.start_streaming",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Start OBS streaming",
        "tags": []
      }
    },
    "/api/rainwave/status": {
      "get": {
        "callbacks": {},
        "description": "Returns current Rainwave service status including listening state, current song, and station information",
        "operationId": "ServerWeb.RainwaveController.status",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RainwaveStatus" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get Rainwave service status",
        "tags": []
      }
    },
    "/api/obs/streaming/stop": {
      "post": {
        "callbacks": {},
        "description": "Stops streaming in OBS Studio",
        "operationId": "ServerWeb.OBSController.stop_streaming",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Stop OBS streaming",
        "tags": []
      }
    },
    "/api/websocket/channels/{module}": {
      "get": {
        "callbacks": {},
        "description": "Returns complete information about a specific WebSocket channel including all commands and events",
        "operationId": "ServerWeb.WebSocketController.channel_details",
        "parameters": [
          {
            "description": "Channel module name (e.g., 'ServerWeb.OverlayChannel')",
            "example": "ServerWeb.OverlayChannel",
            "in": "path",
            "name": "module",
            "required": true,
            "schema": { "type": "string", "x-struct": null, "x-validate": null }
          }
        ],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "404": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Channel not found"
          }
        },
        "summary": "Get detailed channel information",
        "tags": []
      }
    },
    "/api/obs/version": {
      "get": {
        "callbacks": {},
        "description": "Returns OBS Studio version information",
        "operationId": "ServerWeb.OBSController.version",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS version",
        "tags": []
      }
    },
    "/api/rainwave/config": {
      "post": {
        "callbacks": {},
        "description": "Updates Rainwave service configuration including enabled state and active station",
        "operationId": "ServerWeb.RainwaveController.update_config",
        "parameters": [],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RainwaveConfig" } } },
          "description": "Configuration",
          "required": false
        },
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          }
        },
        "summary": "Update Rainwave configuration",
        "tags": []
      }
    },
    "/api/health/subscriptions": {
      "get": {
        "callbacks": {},
        "description": "Returns detailed subscription health information including counts, statuses, and recommendations",
        "operationId": "ServerWeb.HealthController.subscriptions",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Subscription Health"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Subscription Issues"
          }
        },
        "summary": "EventSub subscription health",
        "tags": []
      }
    },
    "/api/obs/recording/stop": {
      "post": {
        "callbacks": {},
        "description": "Stops recording in OBS Studio",
        "operationId": "ServerWeb.OBSController.stop_recording",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Stop OBS recording",
        "tags": []
      }
    },
    "/api/ironmon/checkpoints/{id}/stats": {
      "get": {
        "callbacks": {},
        "description": "Returns statistics for a specific checkpoint",
        "operationId": "ServerWeb.IronmonController.checkpoint_stats",
        "parameters": [
          {
            "description": "Checkpoint ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "x-struct": null, "x-validate": null }
          }
        ],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          }
        },
        "summary": "Get checkpoint statistics",
        "tags": []
      }
    },
    "/api/obs/outputs": {
      "get": {
        "callbacks": {},
        "description": "Returns information about all OBS outputs (streaming, recording, etc.)",
        "operationId": "ServerWeb.OBSController.outputs",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS outputs",
        "tags": []
      }
    },
    "/api/obs/scene/{scene_name}": {
      "post": {
        "callbacks": {},
        "description": "Changes the current scene in OBS Studio",
        "operationId": "ServerWeb.OBSController.set_scene",
        "parameters": [
          {
            "description": "Name of the scene to switch to",
            "in": "path",
            "name": "scene_name",
            "required": true,
            "schema": { "type": "string", "x-struct": null, "x-validate": null }
          }
        ],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Set OBS scene",
        "tags": []
      }
    },
    "/health": {
      "get": {
        "callbacks": {},
        "description": "Always returns 200 OK with minimal response for simple uptime monitoring",
        "operationId": "ServerWeb.HealthController.check",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Healthy"
          }
        },
        "summary": "Basic health check",
        "tags": []
      }
    },
    "/api/obs/stream-status": {
      "get": {
        "callbacks": {},
        "description": "Returns detailed streaming status including bitrate, duration, and connection info",
        "operationId": "ServerWeb.OBSController.stream_status",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS stream status",
        "tags": []
      }
    },
    "/api/control/services": {
      "get": {
        "callbacks": {},
        "description": "Returns detailed status and metrics for all system services",
        "operationId": "ServerWeb.ControlController.services",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "Get detailed service information",
        "tags": []
      }
    },
    "/api/obs/virtual-cam": {
      "get": {
        "callbacks": {},
        "description": "Returns virtual camera status and configuration",
        "operationId": "ServerWeb.OBSController.virtual_cam",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS virtual camera status",
        "tags": []
      }
    },
    "/api/obs/record-status": {
      "get": {
        "callbacks": {},
        "description": "Returns current recording status and information",
        "operationId": "ServerWeb.OBSController.record_status",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get OBS recording status",
        "tags": []
      }
    },
    "/api/twitch/subscriptions": {
      "get": {
        "callbacks": {},
        "description": "Returns all active Twitch EventSub subscriptions",
        "operationId": "ServerWeb.TwitchController.subscriptions",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "List Twitch EventSub subscriptions",
        "tags": []
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new EventSub subscription for the specified event type",
        "operationId": "ServerWeb.TwitchController.create_subscription",
        "parameters": [],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTwitchSubscription" } } },
          "description": "Subscription details",
          "required": true
        },
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          },
          "400": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Bad Request"
          }
        },
        "summary": "Create Twitch EventSub subscription",
        "tags": []
      }
    },
    "/api/control/status": {
      "get": {
        "callbacks": {},
        "description": "Returns overall system status including uptime, memory usage, and service health",
        "operationId": "ServerWeb.ControlController.status",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponse" } } },
            "description": "Success"
          }
        },
        "summary": "Get control system status",
        "tags": []
      }
    },
    "/api/health": {
      "get": {
        "callbacks": {},
        "description": "Returns comprehensive health data including all services and system metrics",
        "operationId": "ServerWeb.HealthController.detailed",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HealthStatus" } } },
            "description": "Healthy"
          },
          "503": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } },
            "description": "Service Unavailable"
          }
        },
        "summary": "Detailed health check",
        "tags": []
      }
    }
  },
  "security": [],
  "servers": [{ "url": "http://localhost:7175", "variables": {} }],
  "tags": []
}
